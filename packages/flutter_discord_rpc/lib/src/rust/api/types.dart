// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.1.0.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import '../lib.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

// These function are ignored because they are on traits that is not defined in current crate (put an empty `#[frb]` on it to unignore): `clone`, `clone`, `clone`, `clone`, `clone`, `clone`, `clone`, `eq`

/// An enum representing the activity type used by an
/// `RPCActivity`
enum ActivityType {
  /// Activity type "Playing X"
  playing,

  /// Activity type "Listening to X"
  listening,

  /// Activity type "Watching X"
  watching,

  /// Activity type "Competing in X"
  competing,
  ;
}

/// A struct representing a Discord rich presence activity
/// Note that all methods return `Self`, and can be chained
/// for fluency
class RPCActivity {
  final String? state;
  final String? details;
  final RPCTimestamps? timestamps;
  final RPCParty? party;
  final RPCAssets? assets;
  final RPCSecrets? secrets;
  final List<RPCButton>? buttons;
  final ActivityType? activityType;

  const RPCActivity({
    this.state,
    this.details,
    this.timestamps,
    this.party,
    this.assets,
    this.secrets,
    this.buttons,
    this.activityType,
  });

  @override
  int get hashCode =>
      state.hashCode ^
      details.hashCode ^
      timestamps.hashCode ^
      party.hashCode ^
      assets.hashCode ^
      secrets.hashCode ^
      buttons.hashCode ^
      activityType.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is RPCActivity &&
          runtimeType == other.runtimeType &&
          state == other.state &&
          details == other.details &&
          timestamps == other.timestamps &&
          party == other.party &&
          assets == other.assets &&
          secrets == other.secrets &&
          buttons == other.buttons &&
          activityType == other.activityType;
}

/// A struct representing the art assets and hover text
/// used by an `RPCActivity`
/// Note that all methods return `Self`, and can be chained
/// for fluency
class RPCAssets {
  final String? largeImage;
  final String? largeText;
  final String? smallImage;
  final String? smallText;

  const RPCAssets({
    this.largeImage,
    this.largeText,
    this.smallImage,
    this.smallText,
  });

  @override
  int get hashCode =>
      largeImage.hashCode ^
      largeText.hashCode ^
      smallImage.hashCode ^
      smallText.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is RPCAssets &&
          runtimeType == other.runtimeType &&
          largeImage == other.largeImage &&
          largeText == other.largeText &&
          smallImage == other.smallImage &&
          smallText == other.smallText;
}

/// A struct representing the buttons that are
/// attached to an `RPCActivity`
///
/// An activity may have a maximum of 2 buttons
class RPCButton {
  final String label;
  final String url;

  const RPCButton({
    required this.label,
    required this.url,
  });

  @override
  int get hashCode => label.hashCode ^ url.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is RPCButton &&
          runtimeType == other.runtimeType &&
          label == other.label &&
          url == other.url;
}

/// A struct representing an `RPCActivity`'s game party
/// Note that all methods return `Self`, and can be chained
/// for fluency
class RPCParty {
  final String? id;
  final I32Array2? size;

  const RPCParty({
    this.id,
    this.size,
  });

  @override
  int get hashCode => id.hashCode ^ size.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is RPCParty &&
          runtimeType == other.runtimeType &&
          id == other.id &&
          size == other.size;
}

/// A struct representing the secrets used by an
/// `RPCActivity`
/// Note that all methods return `Self`, and can be chained
/// for fluency
class RPCSecrets {
  final String? join;
  final String? spectate;
  final String? matchStr;

  const RPCSecrets({
    this.join,
    this.spectate,
    this.matchStr,
  });

  @override
  int get hashCode => join.hashCode ^ spectate.hashCode ^ matchStr.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is RPCSecrets &&
          runtimeType == other.runtimeType &&
          join == other.join &&
          spectate == other.spectate &&
          matchStr == other.matchStr;
}

/// A struct representing an `RPCActivity`'s timestamps
/// Note that all methods return `Self`, and can be chained
/// for fluency
class RPCTimestamps {
  final PlatformInt64? start;
  final PlatformInt64? end;

  const RPCTimestamps({
    this.start,
    this.end,
  });

  @override
  int get hashCode => start.hashCode ^ end.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is RPCTimestamps &&
          runtimeType == other.runtimeType &&
          start == other.start &&
          end == other.end;
}
