// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.11.1.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'api/api.dart';
import 'dart:async';
import 'dart:convert';
import 'frb_generated.dart';
import 'frb_generated.io.dart'
    if (dart.library.js_interop) 'frb_generated.web.dart';
import 'internal/config.dart';
import 'internal/metadata.dart';
import 'internal/playback_status.dart';
import 'internal/timeline.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

/// Main entrypoint of the Rust API
class RustLib extends BaseEntrypoint<RustLibApi, RustLibApiImpl, RustLibWire> {
  @internal
  static final instance = RustLib._();

  RustLib._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    RustLibApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
    bool forceSameCodegenVersion = true,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
      forceSameCodegenVersion: forceSameCodegenVersion,
    );
  }

  /// Initialize flutter_rust_bridge in mock mode.
  /// No libraries for FFI are loaded.
  static void initMock({
    required RustLibApi api,
  }) {
    instance.initMockImpl(
      api: api,
    );
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<RustLibApiImpl, RustLibWire> get apiImplConstructor =>
      RustLibApiImpl.new;

  @override
  WireConstructor<RustLibWire> get wireConstructor =>
      RustLibWire.fromExternalLibrary;

  @override
  Future<void> executeRustInitializers() async {
    await api.crateApiApiInitApp();
  }

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig =>
      kDefaultExternalLibraryLoaderConfig;

  @override
  String get codegenVersion => '2.11.1';

  @override
  int get rustContentHash => -1299829031;

  static const kDefaultExternalLibraryLoaderConfig =
      ExternalLibraryLoaderConfig(
    stem: 'smtc_windows',
    ioDirectory: 'rust/target/release/',
    webPrefix: 'pkg/',
  );
}

abstract class RustLibApi extends BaseApi {
  Future<void> crateApiApiInitApp();

  Stream<String> crateApiApiSmtcButtonPressEvent(
      {required SmtcInternal internal});

  Future<void> crateApiApiSmtcClearMetadata({required SmtcInternal internal});

  Future<void> crateApiApiSmtcDisableSmtc({required SmtcInternal internal});

  Future<void> crateApiApiSmtcEnableSmtc({required SmtcInternal internal});

  SmtcInternal crateApiApiSmtcNew({bool? enabled});

  Stream<PlatformInt64> crateApiApiSmtcPositionChangeRequestEvent(
      {required SmtcInternal internal});

  Stream<String> crateApiApiSmtcRepeatModeRequestEvent(
      {required SmtcInternal internal});

  Stream<bool> crateApiApiSmtcShuffleRequestEvent(
      {required SmtcInternal internal});

  Future<void> crateApiApiSmtcUpdateConfig(
      {required SmtcInternal internal, required SMTCConfig config});

  Future<void> crateApiApiSmtcUpdateMetadata(
      {required SmtcInternal internal, required MusicMetadata metadata});

  Future<void> crateApiApiSmtcUpdatePlaybackStatus(
      {required SmtcInternal internal, required PlaybackStatus status});

  Future<void> crateApiApiSmtcUpdateRepeatMode(
      {required SmtcInternal internal, required String repeatMode});

  Future<void> crateApiApiSmtcUpdateShuffle(
      {required SmtcInternal internal, required bool shuffle});

  Future<void> crateApiApiSmtcUpdateTimeline(
      {required SmtcInternal internal, required PlaybackTimeline timeline});

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_SmtcInternal;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_SmtcInternal;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_SmtcInternalPtr;
}

class RustLibApiImpl extends RustLibApiImplPlatform implements RustLibApi {
  RustLibApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  Future<void> crateApiApiInitApp() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiApiInitAppConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiApiInitAppConstMeta => const TaskConstMeta(
        debugName: "init_app",
        argNames: [],
      );

  @override
  Stream<String> crateApiApiSmtcButtonPressEvent(
      {required SmtcInternal internal}) {
    final sink = RustStreamSink<String>();
    unawaited(handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_RustOpaque_SMTCInternal(internal, serializer);
        sse_encode_StreamSink_String_Sse(sink, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 2, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiApiSmtcButtonPressEventConstMeta,
      argValues: [internal, sink],
      apiImpl: this,
    )));
    return sink.stream;
  }

  TaskConstMeta get kCrateApiApiSmtcButtonPressEventConstMeta =>
      const TaskConstMeta(
        debugName: "smtc_button_press_event",
        argNames: ["internal", "sink"],
      );

  @override
  Future<void> crateApiApiSmtcClearMetadata({required SmtcInternal internal}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_RustOpaque_SMTCInternal(internal, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 3, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiApiSmtcClearMetadataConstMeta,
      argValues: [internal],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiApiSmtcClearMetadataConstMeta =>
      const TaskConstMeta(
        debugName: "smtc_clear_metadata",
        argNames: ["internal"],
      );

  @override
  Future<void> crateApiApiSmtcDisableSmtc({required SmtcInternal internal}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_RustOpaque_SMTCInternal(internal, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 4, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiApiSmtcDisableSmtcConstMeta,
      argValues: [internal],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiApiSmtcDisableSmtcConstMeta => const TaskConstMeta(
        debugName: "smtc_disable_smtc",
        argNames: ["internal"],
      );

  @override
  Future<void> crateApiApiSmtcEnableSmtc({required SmtcInternal internal}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_RustOpaque_SMTCInternal(internal, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 5, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiApiSmtcEnableSmtcConstMeta,
      argValues: [internal],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiApiSmtcEnableSmtcConstMeta => const TaskConstMeta(
        debugName: "smtc_enable_smtc",
        argNames: ["internal"],
      );

  @override
  SmtcInternal crateApiApiSmtcNew({bool? enabled}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_box_autoadd_bool(enabled, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 6)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_RustOpaque_SMTCInternal,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiApiSmtcNewConstMeta,
      argValues: [enabled],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiApiSmtcNewConstMeta => const TaskConstMeta(
        debugName: "smtc_new",
        argNames: ["enabled"],
      );

  @override
  Stream<PlatformInt64> crateApiApiSmtcPositionChangeRequestEvent(
      {required SmtcInternal internal}) {
    final sink = RustStreamSink<PlatformInt64>();
    unawaited(handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_RustOpaque_SMTCInternal(internal, serializer);
        sse_encode_StreamSink_i_64_Sse(sink, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 7, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiApiSmtcPositionChangeRequestEventConstMeta,
      argValues: [internal, sink],
      apiImpl: this,
    )));
    return sink.stream;
  }

  TaskConstMeta get kCrateApiApiSmtcPositionChangeRequestEventConstMeta =>
      const TaskConstMeta(
        debugName: "smtc_position_change_request_event",
        argNames: ["internal", "sink"],
      );

  @override
  Stream<String> crateApiApiSmtcRepeatModeRequestEvent(
      {required SmtcInternal internal}) {
    final sink = RustStreamSink<String>();
    unawaited(handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_RustOpaque_SMTCInternal(internal, serializer);
        sse_encode_StreamSink_String_Sse(sink, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 8, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiApiSmtcRepeatModeRequestEventConstMeta,
      argValues: [internal, sink],
      apiImpl: this,
    )));
    return sink.stream;
  }

  TaskConstMeta get kCrateApiApiSmtcRepeatModeRequestEventConstMeta =>
      const TaskConstMeta(
        debugName: "smtc_repeat_mode_request_event",
        argNames: ["internal", "sink"],
      );

  @override
  Stream<bool> crateApiApiSmtcShuffleRequestEvent(
      {required SmtcInternal internal}) {
    final sink = RustStreamSink<bool>();
    unawaited(handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_RustOpaque_SMTCInternal(internal, serializer);
        sse_encode_StreamSink_bool_Sse(sink, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 9, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiApiSmtcShuffleRequestEventConstMeta,
      argValues: [internal, sink],
      apiImpl: this,
    )));
    return sink.stream;
  }

  TaskConstMeta get kCrateApiApiSmtcShuffleRequestEventConstMeta =>
      const TaskConstMeta(
        debugName: "smtc_shuffle_request_event",
        argNames: ["internal", "sink"],
      );

  @override
  Future<void> crateApiApiSmtcUpdateConfig(
      {required SmtcInternal internal, required SMTCConfig config}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_RustOpaque_SMTCInternal(internal, serializer);
        sse_encode_box_autoadd_smtc_config(config, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 10, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiApiSmtcUpdateConfigConstMeta,
      argValues: [internal, config],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiApiSmtcUpdateConfigConstMeta =>
      const TaskConstMeta(
        debugName: "smtc_update_config",
        argNames: ["internal", "config"],
      );

  @override
  Future<void> crateApiApiSmtcUpdateMetadata(
      {required SmtcInternal internal, required MusicMetadata metadata}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_RustOpaque_SMTCInternal(internal, serializer);
        sse_encode_box_autoadd_music_metadata(metadata, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 11, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiApiSmtcUpdateMetadataConstMeta,
      argValues: [internal, metadata],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiApiSmtcUpdateMetadataConstMeta =>
      const TaskConstMeta(
        debugName: "smtc_update_metadata",
        argNames: ["internal", "metadata"],
      );

  @override
  Future<void> crateApiApiSmtcUpdatePlaybackStatus(
      {required SmtcInternal internal, required PlaybackStatus status}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_RustOpaque_SMTCInternal(internal, serializer);
        sse_encode_playback_status(status, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 12, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiApiSmtcUpdatePlaybackStatusConstMeta,
      argValues: [internal, status],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiApiSmtcUpdatePlaybackStatusConstMeta =>
      const TaskConstMeta(
        debugName: "smtc_update_playback_status",
        argNames: ["internal", "status"],
      );

  @override
  Future<void> crateApiApiSmtcUpdateRepeatMode(
      {required SmtcInternal internal, required String repeatMode}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_RustOpaque_SMTCInternal(internal, serializer);
        sse_encode_String(repeatMode, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 13, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiApiSmtcUpdateRepeatModeConstMeta,
      argValues: [internal, repeatMode],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiApiSmtcUpdateRepeatModeConstMeta =>
      const TaskConstMeta(
        debugName: "smtc_update_repeat_mode",
        argNames: ["internal", "repeatMode"],
      );

  @override
  Future<void> crateApiApiSmtcUpdateShuffle(
      {required SmtcInternal internal, required bool shuffle}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_RustOpaque_SMTCInternal(internal, serializer);
        sse_encode_bool(shuffle, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 14, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiApiSmtcUpdateShuffleConstMeta,
      argValues: [internal, shuffle],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiApiSmtcUpdateShuffleConstMeta =>
      const TaskConstMeta(
        debugName: "smtc_update_shuffle",
        argNames: ["internal", "shuffle"],
      );

  @override
  Future<void> crateApiApiSmtcUpdateTimeline(
      {required SmtcInternal internal, required PlaybackTimeline timeline}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_RustOpaque_SMTCInternal(internal, serializer);
        sse_encode_box_autoadd_playback_timeline(timeline, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 15, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiApiSmtcUpdateTimelineConstMeta,
      argValues: [internal, timeline],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiApiSmtcUpdateTimelineConstMeta =>
      const TaskConstMeta(
        debugName: "smtc_update_timeline",
        argNames: ["internal", "timeline"],
      );

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_SmtcInternal =>
          wire.rust_arc_increment_strong_count_RustOpaque_SMTCInternal;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_SmtcInternal =>
          wire.rust_arc_decrement_strong_count_RustOpaque_SMTCInternal;

  @protected
  AnyhowException dco_decode_AnyhowException(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AnyhowException(raw as String);
  }

  @protected
  SmtcInternal dco_decode_RustOpaque_SMTCInternal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SmtcInternalImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  RustStreamSink<String> dco_decode_StreamSink_String_Sse(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError();
  }

  @protected
  RustStreamSink<bool> dco_decode_StreamSink_bool_Sse(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError();
  }

  @protected
  RustStreamSink<PlatformInt64> dco_decode_StreamSink_i_64_Sse(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError();
  }

  @protected
  String dco_decode_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as String;
  }

  @protected
  bool dco_decode_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as bool;
  }

  @protected
  bool dco_decode_box_autoadd_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as bool;
  }

  @protected
  PlatformInt64 dco_decode_box_autoadd_i_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_i_64(raw);
  }

  @protected
  MusicMetadata dco_decode_box_autoadd_music_metadata(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_music_metadata(raw);
  }

  @protected
  PlaybackTimeline dco_decode_box_autoadd_playback_timeline(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_playback_timeline(raw);
  }

  @protected
  SMTCConfig dco_decode_box_autoadd_smtc_config(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_smtc_config(raw);
  }

  @protected
  int dco_decode_i_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  PlatformInt64 dco_decode_i_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeI64(raw);
  }

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint8List;
  }

  @protected
  MusicMetadata dco_decode_music_metadata(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 5)
      throw Exception('unexpected arr length: expect 5 but see ${arr.length}');
    return MusicMetadata(
      title: dco_decode_opt_String(arr[0]),
      artist: dco_decode_opt_String(arr[1]),
      album: dco_decode_opt_String(arr[2]),
      albumArtist: dco_decode_opt_String(arr[3]),
      thumbnail: dco_decode_opt_String(arr[4]),
    );
  }

  @protected
  String? dco_decode_opt_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_String(raw);
  }

  @protected
  bool? dco_decode_opt_box_autoadd_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_bool(raw);
  }

  @protected
  PlatformInt64? dco_decode_opt_box_autoadd_i_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_i_64(raw);
  }

  @protected
  PlaybackStatus dco_decode_playback_status(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return PlaybackStatus.values[raw as int];
  }

  @protected
  PlaybackTimeline dco_decode_playback_timeline(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 5)
      throw Exception('unexpected arr length: expect 5 but see ${arr.length}');
    return PlaybackTimeline(
      startTimeMs: dco_decode_i_64(arr[0]),
      endTimeMs: dco_decode_i_64(arr[1]),
      positionMs: dco_decode_i_64(arr[2]),
      minSeekTimeMs: dco_decode_opt_box_autoadd_i_64(arr[3]),
      maxSeekTimeMs: dco_decode_opt_box_autoadd_i_64(arr[4]),
    );
  }

  @protected
  SMTCConfig dco_decode_smtc_config(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 7)
      throw Exception('unexpected arr length: expect 7 but see ${arr.length}');
    return SMTCConfig(
      playEnabled: dco_decode_bool(arr[0]),
      pauseEnabled: dco_decode_bool(arr[1]),
      stopEnabled: dco_decode_bool(arr[2]),
      nextEnabled: dco_decode_bool(arr[3]),
      prevEnabled: dco_decode_bool(arr[4]),
      fastForwardEnabled: dco_decode_bool(arr[5]),
      rewindEnabled: dco_decode_bool(arr[6]),
    );
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return;
  }

  @protected
  BigInt dco_decode_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeU64(raw);
  }

  @protected
  AnyhowException sse_decode_AnyhowException(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_String(deserializer);
    return AnyhowException(inner);
  }

  @protected
  SmtcInternal sse_decode_RustOpaque_SMTCInternal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return SmtcInternalImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  RustStreamSink<String> sse_decode_StreamSink_String_Sse(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    throw UnimplementedError('Unreachable ()');
  }

  @protected
  RustStreamSink<bool> sse_decode_StreamSink_bool_Sse(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    throw UnimplementedError('Unreachable ()');
  }

  @protected
  RustStreamSink<PlatformInt64> sse_decode_StreamSink_i_64_Sse(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    throw UnimplementedError('Unreachable ()');
  }

  @protected
  String sse_decode_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return utf8.decoder.convert(inner);
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  bool sse_decode_box_autoadd_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_bool(deserializer));
  }

  @protected
  PlatformInt64 sse_decode_box_autoadd_i_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_i_64(deserializer));
  }

  @protected
  MusicMetadata sse_decode_box_autoadd_music_metadata(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_music_metadata(deserializer));
  }

  @protected
  PlaybackTimeline sse_decode_box_autoadd_playback_timeline(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_playback_timeline(deserializer));
  }

  @protected
  SMTCConfig sse_decode_box_autoadd_smtc_config(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_smtc_config(deserializer));
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt32();
  }

  @protected
  PlatformInt64 sse_decode_i_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getPlatformInt64();
  }

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  MusicMetadata sse_decode_music_metadata(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_title = sse_decode_opt_String(deserializer);
    var var_artist = sse_decode_opt_String(deserializer);
    var var_album = sse_decode_opt_String(deserializer);
    var var_albumArtist = sse_decode_opt_String(deserializer);
    var var_thumbnail = sse_decode_opt_String(deserializer);
    return MusicMetadata(
        title: var_title,
        artist: var_artist,
        album: var_album,
        albumArtist: var_albumArtist,
        thumbnail: var_thumbnail);
  }

  @protected
  String? sse_decode_opt_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_String(deserializer));
    } else {
      return null;
    }
  }

  @protected
  bool? sse_decode_opt_box_autoadd_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_bool(deserializer));
    } else {
      return null;
    }
  }

  @protected
  PlatformInt64? sse_decode_opt_box_autoadd_i_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_i_64(deserializer));
    } else {
      return null;
    }
  }

  @protected
  PlaybackStatus sse_decode_playback_status(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return PlaybackStatus.values[inner];
  }

  @protected
  PlaybackTimeline sse_decode_playback_timeline(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_startTimeMs = sse_decode_i_64(deserializer);
    var var_endTimeMs = sse_decode_i_64(deserializer);
    var var_positionMs = sse_decode_i_64(deserializer);
    var var_minSeekTimeMs = sse_decode_opt_box_autoadd_i_64(deserializer);
    var var_maxSeekTimeMs = sse_decode_opt_box_autoadd_i_64(deserializer);
    return PlaybackTimeline(
        startTimeMs: var_startTimeMs,
        endTimeMs: var_endTimeMs,
        positionMs: var_positionMs,
        minSeekTimeMs: var_minSeekTimeMs,
        maxSeekTimeMs: var_maxSeekTimeMs);
  }

  @protected
  SMTCConfig sse_decode_smtc_config(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_playEnabled = sse_decode_bool(deserializer);
    var var_pauseEnabled = sse_decode_bool(deserializer);
    var var_stopEnabled = sse_decode_bool(deserializer);
    var var_nextEnabled = sse_decode_bool(deserializer);
    var var_prevEnabled = sse_decode_bool(deserializer);
    var var_fastForwardEnabled = sse_decode_bool(deserializer);
    var var_rewindEnabled = sse_decode_bool(deserializer);
    return SMTCConfig(
        playEnabled: var_playEnabled,
        pauseEnabled: var_pauseEnabled,
        stopEnabled: var_stopEnabled,
        nextEnabled: var_nextEnabled,
        prevEnabled: var_prevEnabled,
        fastForwardEnabled: var_fastForwardEnabled,
        rewindEnabled: var_rewindEnabled);
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8();
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  BigInt sse_decode_usize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getBigUint64();
  }

  @protected
  void sse_encode_AnyhowException(
      AnyhowException self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.message, serializer);
  }

  @protected
  void sse_encode_RustOpaque_SMTCInternal(
      SmtcInternal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as SmtcInternalImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void sse_encode_StreamSink_String_Sse(
      RustStreamSink<String> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(
        self.setupAndSerialize(
            codec: SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: sse_decode_AnyhowException,
        )),
        serializer);
  }

  @protected
  void sse_encode_StreamSink_bool_Sse(
      RustStreamSink<bool> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(
        self.setupAndSerialize(
            codec: SseCodec(
          decodeSuccessData: sse_decode_bool,
          decodeErrorData: sse_decode_AnyhowException,
        )),
        serializer);
  }

  @protected
  void sse_encode_StreamSink_i_64_Sse(
      RustStreamSink<PlatformInt64> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(
        self.setupAndSerialize(
            codec: SseCodec(
          decodeSuccessData: sse_decode_i_64,
          decodeErrorData: sse_decode_AnyhowException,
        )),
        serializer);
  }

  @protected
  void sse_encode_String(String self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(utf8.encoder.convert(self), serializer);
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self ? 1 : 0);
  }

  @protected
  void sse_encode_box_autoadd_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_bool(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_i_64(
      PlatformInt64 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_64(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_music_metadata(
      MusicMetadata self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_music_metadata(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_playback_timeline(
      PlaybackTimeline self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_playback_timeline(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_smtc_config(
      SMTCConfig self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_smtc_config(self, serializer);
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt32(self);
  }

  @protected
  void sse_encode_i_64(PlatformInt64 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putPlatformInt64(self);
  }

  @protected
  void sse_encode_list_prim_u_8_strict(
      Uint8List self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void sse_encode_music_metadata(MusicMetadata self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_opt_String(self.title, serializer);
    sse_encode_opt_String(self.artist, serializer);
    sse_encode_opt_String(self.album, serializer);
    sse_encode_opt_String(self.albumArtist, serializer);
    sse_encode_opt_String(self.thumbnail, serializer);
  }

  @protected
  void sse_encode_opt_String(String? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_String(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_bool(bool? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_bool(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_i_64(
      PlatformInt64? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_i_64(self, serializer);
    }
  }

  @protected
  void sse_encode_playback_status(
      PlaybackStatus self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_playback_timeline(
      PlaybackTimeline self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_64(self.startTimeMs, serializer);
    sse_encode_i_64(self.endTimeMs, serializer);
    sse_encode_i_64(self.positionMs, serializer);
    sse_encode_opt_box_autoadd_i_64(self.minSeekTimeMs, serializer);
    sse_encode_opt_box_autoadd_i_64(self.maxSeekTimeMs, serializer);
  }

  @protected
  void sse_encode_smtc_config(SMTCConfig self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_bool(self.playEnabled, serializer);
    sse_encode_bool(self.pauseEnabled, serializer);
    sse_encode_bool(self.stopEnabled, serializer);
    sse_encode_bool(self.nextEnabled, serializer);
    sse_encode_bool(self.prevEnabled, serializer);
    sse_encode_bool(self.fastForwardEnabled, serializer);
    sse_encode_bool(self.rewindEnabled, serializer);
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_usize(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putBigUint64(self);
  }
}

@sealed
class SmtcInternalImpl extends RustOpaque implements SmtcInternal {
  // Not to be used by end users
  SmtcInternalImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  SmtcInternalImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_SmtcInternal,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_SmtcInternal,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_SmtcInternalPtr,
  );
}
